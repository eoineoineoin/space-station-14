using Content.Client.UserInterface.Controls;
using Content.Shared.Borgs;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;

namespace Content.Client.Borgs
{
    [GenerateTypedNameReferences]
    public sealed partial class LawsMenu : FancyWindow
    {
        [Dependency] private readonly IEntityManager _entityManager = default!;
        public LawsBoundUserInterface Owner { get; }

        public LawsMenu(LawsBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            Owner = owner;
            UpdateLaws();

            if (_entityManager.TryGetComponent<LawsComponent>(owner.Machine, out var laws))
                StateLawsButton.Visible = laws.CanState;

            StateLawsButton.OnPressed += _ =>
            {
                StateLaws();
            };
        }

        public void UpdateLaws()
        {
            if (!_entityManager.TryGetComponent<LawsComponent>(Owner.Machine, out var laws))
                return;

            Laws.DisposeAllChildren();

            foreach (var law in laws.Laws)
            {
                var newLabel = new LawUIContainer();
                newLabel.SetHeading($"Law {1 + Laws.ChildCount}");
                newLabel.SetDescription(law);
                Laws.AddChild(newLabel);

                /*
                // I cannot for the life of me get a background to display on these
                var lawLabel = new RichTextTexture();
                lawLabel.SetMessage(law);
                lawLabel.Margin = new Thickness(6);
                Laws.AddChild(lawLabel);

                var testTexture = IoCManager.Resolve<IResourceCache>()
                    .GetTexture("/Textures/Interface/Nano/checkbox_checked.svg.96dpi.png");
                lawLabel.Texture = testTexture;
                */
            }
        }

        /// <summary>
        ///     Sends a message to state each of the laws in chat.
        /// </summary>
        private void StateLaws()
        {
            Owner.StateLawsMessage();
        }
    }

    /// Simple RichTextLabel which uses a Texture to provide the background
    public class RichTextTexture : RichTextLabel
    {
        /// The texture to use for drawing the background, "underneath" the text
        public Texture? Texture;

        protected override void Draw(DrawingHandleScreen handle)
        {
            if(Texture != null)
            {
                handle.DrawTextureRect(Texture, SizeBox);
            }

            base.Draw(handle);
        }
    }
}
